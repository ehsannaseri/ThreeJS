
<script type="x-shader/x-vertex" id="fragmentShader">
    #ifdef GL_ES
    precision mediump float;
    #endif
    // #I need Smoke and mirros !! anyone can help with the design?   -Harley.
    uniform float time;
    uniform vec2 resolution;

    #define N 5
    //nice coffee ... kind of
    void main( void ) {
        vec2 v=(gl_FragCoord.xy-(resolution*0.5))/min(resolution.y,resolution.x)*10.543;
        float t=time * 0.4,r=2.24+sin(time)*1.5;
        for (int i=1;i<N;i++){
            float d=(668.14159265 / float(N))*(float(i)*17.660);
            r+=length(vec2(v.y,v.x))+1.61;
            v = vec2(v.x+cos(r+sin(r)-d)+cos(t),v.y-cos(r+sin(r)+d)+sin(t));
            v.x*=1.04567;
        }
        r = (sin(r*0.05)*0.5)+0.5;
        r = pow(r, 60.0);
        gl_FragColor = vec4(r,pow(max(r-0.85,0.0)*8.0,4.0),pow(max(r-1.875,0.1)*5.0,4.0), 1.0 );
    }
</script>
<script type="x-shader/x-fragment" id="fragmentShader">
    uniform float delta;
    varying float vOpacity;
    varying vec3 vUv;
    void main()
    {
        float r = 1.0 + cos(vUv.x * delta);
        float g = 0.5 + sin(delta) * 0.5;
        float b = 0.0;
        gl_FragColor = vec4(r , g , b , vOpacity);
    }
</script>
<script type="x-shader/x-fragment">
#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;
#define numStars 5

void main( void ) {

	vec2 position = ( gl_FragCoord.xy -  resolution.xy*.5 ) / resolution.x;
	
	position.x -= 0.8*(mouse.x-0.5);
	position.y -= 0.8*(mouse.y-0.5);

	// 256 angle steps
	float angle = atan(position.y,position.x)/(2.*3.14159265359);
	angle -= floor(angle);
	float rad = length(position);
	
	vec3 color = vec3(0.0);
	for (int i = 0; i < numStars; i++) {
		float angleFract = fract(angle*256.);
		float angleRnd = floor(angle*256.)+1.;
		float angleRnd1 = fract(angleRnd*fract(angleRnd*.7235)*45.1);
		float angleRnd2 = fract(angleRnd*fract(angleRnd*.82657)*13.724);
		float t = time+angleRnd1*10.;
		t-=2.*time;
		
		float radDist = sqrt(angleRnd2+float(i));
		
		float adist = radDist/rad*.1;
		float dist = (t*.1+adist);
		dist = abs(fract(dist)-.5);
		color += vec3(max(0.,.5-dist*40./adist)*(.5-abs(angleFract-.5))*5./adist/radDist);
		
		
		color.r *= 1.05*pow(1.15,angleRnd2);
		color.b *= pow(angleRnd2, 0.3) * 1.4;
		color.g *= 1.02;
		
		angle = fract(angle+.61);
	}

	gl_FragColor = vec4( color*.3, 1.0);

}
</script>
<script type="x-shader/x-fragment">

// StarTrip

#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;
#define numStars 8
#define speed 0.5

void main( void )
{
	vec2 position = ( gl_FragCoord.xy -  resolution.xy*.5 ) / resolution.x;
	position += mouse - 0.5;

	// 256 angle steps
	float angle = atan(position.y,position.x) / (2.*3.14159265359);
	angle -= floor(angle);
	float rad = length(position);
	
	vec3 color = vec3(0.0);
	for (int i = 0; i < numStars; i++) 
	{
		float angleFract = fract(angle*256.);
		float angleRnd = floor(angle*256.)+1.;
		float angleRnd1 = fract(angleRnd*fract(angleRnd*.7235)*45.1);
		float angleRnd2 = fract(angleRnd*fract(angleRnd*.82657)*13.724);
		float t = speed * time - angleRnd1*10.;
		float radDist = sqrt(angleRnd2+float(i));
		float adist = radDist/rad*.1;
		float dist = abs(fract((t*.1+adist))-.5);
		color += vec3(max(0.,.5-dist*40./adist)*(.5-abs(angleFract-.5))*5./adist/radDist);
		color.r *= 1.05*pow(1.15,angleRnd2);
		color.b *= pow(angleRnd2, 0.3) * 1.4;
		color.g *= 1.02;
		angle = fract(angle+.61);
	}
	gl_FragColor = vec4( color*.3, 1.0);
}
</script>
<script type="x-shader/x-fragment">
// Créé par andremichelle le 2019-11-15
// From Shadertoy ; Gigatron for glslsandbox : !

#ifdef GL_ES
precision mediump float;
#endif

#extension GL_OES_standard_derivatives : enable

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

#define PI_INV 0.318309
#define PI_TWO_INV 0.15915
#define clip(x) clamp(x, 0., 1.)

float Hash(in vec2 p, in float scale) {
	return fract(sin(dot(mod(p, scale), vec2(27.16898, 38.90563))) * 5151.5473453);
}

vec3 check(vec2 uv, float s) {
    return vec3(.12+0.06*mod(floor(s*uv.x)+floor(s*uv.y),2.0));
}

float Noise(in vec2 p, in float scale ) {
	vec2 f;
	p *= scale;
	f = fract(p);
    p = floor(p);
    f = f*f*(3.0-2.0*f);
    return mix(mix(Hash(p, scale),
			Hash(p + vec2(1.0, 0.0), scale), f.x),
			mix(Hash(p + vec2(0.0, 1.0), scale),
			Hash(p + vec2(1.0, 1.0), scale), f.x), f.y);
}

float fbm(in vec2 p, float scale) {
	float f = 0.0;
    p = mod(p, scale);
	float amp   = .6;
	for (int i = 0; i < 5; i++)
	{
		f += Noise(p, scale) * amp;
		amp *= .5;
		scale *= 2.;
	}
	return min(f, 1.0);
}

vec4 over( in vec4 a, in vec4 b ) {
    return mix(a, b, 1.-a.w);
}

void main() {
    vec2 uv = (gl_FragCoord.xy-resolution.xy*0.5)/resolution.y*2.;

    float l = length(uv);
    float a = atan(uv.y, uv.x);
	float t = time;
    float p = sin(t*.25);
    vec4 c = vec4(0.);
    
	c = over(vec4(vec3(1., .8, .6), pow(distance(uv, vec2(.98, .3)), -.5)*.01), c);
	c = over(vec4(vec3(1., .8, .6), pow(distance(uv, vec2(-.98, -.8)), -.5)*.01), c);
    
    vec2 ws;
    ws = normalize(uv)*((2.+p*.1)*asin(length(uv)*2.) * PI_INV);
    ws.x += t*.04;
    float r;
    vec3 sun;
    vec3 
        c0 = vec3(.2, .0, .0), 
        c1 = vec3(1., .1, .0),
        c2 = vec3(1., .5, .0),
        c3 = vec3(1., 1., 1.);
    r = smoothstep(.4+p*.1, 1., fbm(ws, 20.));
    sun = mix(c0, mix(c1, mix(c2, c3, clip(r*3.-2.)), clip(r*3.-1.)), clip(r*3.));
    c = over(vec4(sun, smoothstep(.01, .0, l-.493)), c);

    ws = vec2(a*PI_TWO_INV+l*sin(t*.1)*.004, l*.01);
    ws.y -= t*.008;
    r = smoothstep(.6, .0, fbm(ws, 20.) * smoothstep(.2, .9, l)*1.25);
    sun = mix(c0, mix(c1, mix(c2, c3, clip(r*3.-2.)), clip(r*3.-1.)), clip(r*3.));
    c = over(vec4(sun, pow(smoothstep(.1, .6, l), 4.) * r), c);
    
    r = smoothstep(.9, .0, fbm(ws+.25, 5.) * smoothstep(.4, .6, l*1.1));
    sun = mix(c0, mix(c1, mix(c2, c3, clip(r*3.-2.)), clip(r*3.-1.)), clip(r*3.));
    c = over(vec4(sun, pow(smoothstep(.0, .8, l*1.2), .2) * r * .1), c);
    
    gl_FragColor = vec4(c);
    gl_FragColor.a =1.0;
}
</script>
<script type="x-shader/x-fragment">
/**
 * @author scones
 *
 * galaxy playground - glsl
 * + background stars found at http://glsl.heroku.com/e#5454.15 
 **/

// logos7@o2.pl - rottion added

#ifdef GL_ES
precision highp float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

const float SQRT_2 = 1.41421356237;
const float PI = 3.14159265359;
const float PI_2 = 1.57079632679;
const float spiral_coefficient = 1.65;
const float SPEED	= 0.005;
const float BRIGHTNESS	= 5.0;
  vec2 ORIGIN	= resolution.xy*.5;


const float seed = 0.1;

const float max_red = 210.0 / 255.0;

float rand(vec2 co){
	// implementation found at: lumina.sourceforge.net/Tutorials/Noise.html
	co.x += seed;
	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 434658.5453116487577816842168767168087910388737310);
}

float noise2f( in vec2 p )
{
	vec2 ip = vec2(floor(p));
	vec2 u = fract(p);
	// http://www.iquilezles.org/www/articles/morenoise/morenoise.htm
	u = u*u*(3.0-2.0*u);
	//u = u*u*u*((6.0*u-15.0)*u+10.0);
	
	float res = mix(
		mix(rand(ip),  rand(ip+vec2(1.0,0.0)),u.x),
		mix(rand(ip+vec2(0.0,1.0)),   rand(ip+vec2(1.0,1.0)),u.x),
		u.y)
	;
	return res*res;
	//return 2.0* (res-0.5);
}

float fbm(vec2 c) {
	float f = 0.0;
	float w = 1.0;
	for (int i = 0; i < 8; i++) {
		f+= w*noise2f(c);
		c*=2.0;
		w*=0.5;
	}
	return f;
}

float ft() {
	float t = time + 6000.0;
	t = (1.0/ t ) * 10000.0;
	return t;
}


float pattern(  vec2 p, out vec2 q, out vec2 r ) {
	q.x = fbm( p  +0.00*time);
	q.y = fbm( p + vec2(1.0));
	
	r.x = fbm( p +1.0*q + vec2(1.7,9.2)+0.15);
	r.y = fbm( p+ 1.0*q + vec2(8.3,2.8)+0.126);
	return fbm(p +1.0*r + 0.00001* time);
}


float parting(float part) {
	float result = part;
	if (part < 0.5) {
		result = 0.5;
	} else {
		result *= 2.0;
		result -= 1.0;
	}
	return result;
}

float light_density(vec2 p, float p_length) {
	float color_factor = SQRT_2 - p_length + 0.2;
	
	float r = (atan(p.y, p.x) + PI) / (PI);

	float result;
		

	float part_1 = fract(r  - sqrt(p_length) * spiral_coefficient);
	float part_2 = 1.0 - part_1;
	float spiral = parting(part_1) + parting(part_2);

	vec2 foo, bar, moo, meh;
	float noisy = fbm(vec2(spiral, p_length)) ;
	noisy *= noisy * noisy;
	float general_noise = fbm(p) / 1.8;
	result = (spiral * noisy) * color_factor + general_noise * (color_factor + 0.1);

	return result;
}

vec3 star_distribution(float luminosity, float dist) {
	float rand_dist = fbm(vec2(luminosity, dist));
	float rand_dist_2 = fbm(vec2(dist));
	float red   = clamp(80.0/255.0 * (dist) , 170.0/255.0, 1.0) * (luminosity);
	float green = clamp(190.0/255.0 * (dist), 170.0/255.0, 1.0) * (luminosity);
	float blue  = clamp(2.0 * dist, 100.0/255.0, 1.0) * (luminosity);
	// Background stars
	vec2   pos = gl_FragCoord.xy - ORIGIN;
	vec2 coord = vec2(pow(dist, 0.1), atan(pos.x, pos.y) / (PI*2.0));
	
	float a = pow((1.0-dist),20.0);
	float t = time*-.01;
	float r = coord.x - (t*SPEED);
	float c = fract(a+coord.y + 0.0*.543);
	vec2  p = vec2(r, c*.5)*4000.0;
	vec2 uv = fract(p)*2.0-1.0;
	float m = clamp((rand(floor(p))-.9)*BRIGHTNESS, 0.0, 1.0);
	float star =  clamp((1.0-length(uv*2.0))*m*dist, 0.0, 1.0);
	
	return vec3(red+star,green+star,blue+star);
}

vec3 galaxy(vec2 p) {
	float p_length = length(p) - 0.1;
	float result;

	result = light_density(p, p_length);

	return star_distribution(result, p_length);
	
	return vec3(result);
}



void main( void ) {

	vec2 p = (gl_FragCoord.xy / resolution.xy)*2.0-1.0;
	p.x *= resolution.x / resolution.y;
	
	float fc = cos(time/10.0);
	float fs = sin(time/10.0);
	vec2 pp = vec2(fc * p.x - fs * p.y, fc * p.y + fs * p.x);
	
	vec3 clr = galaxy(pp);
	//clr.r *= fbm(vec2(cos(time/12.),sin(time/11.)));
	//clr.g *= fbm(vec2(sin(time/12.),sin(time/4.)));
	//clr.b *= fbm(vec2(sin(time/21.),cos(time/10.)));

	gl_FragColor = vec4(clr, 1.0);
}

</script>